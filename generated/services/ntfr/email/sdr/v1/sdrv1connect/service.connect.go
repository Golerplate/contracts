// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/ntfr/email/sdr/v1/service.proto

package sdrv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/golerplate/contracts/generated/services/ntfr/email/sdr/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// NotifierEmailSdrName is the fully-qualified name of the NotifierEmailSdr service.
	NotifierEmailSdrName = "services.ntfr.email.sdr.v1.NotifierEmailSdr"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotifierEmailSdrSendVerificationEmailProcedure is the fully-qualified name of the
	// NotifierEmailSdr's SendVerificationEmail RPC.
	NotifierEmailSdrSendVerificationEmailProcedure = "/services.ntfr.email.sdr.v1.NotifierEmailSdr/SendVerificationEmail"
	// NotifierEmailSdrSendResetPasswordEmailProcedure is the fully-qualified name of the
	// NotifierEmailSdr's SendResetPasswordEmail RPC.
	NotifierEmailSdrSendResetPasswordEmailProcedure = "/services.ntfr.email.sdr.v1.NotifierEmailSdr/SendResetPasswordEmail"
)

// NotifierEmailSdrClient is a client for the services.ntfr.email.sdr.v1.NotifierEmailSdr service.
type NotifierEmailSdrClient interface {
	SendVerificationEmail(context.Context, *connect_go.Request[v1.SendVerificationEmailRequest]) (*connect_go.Response[v1.SendVerificationEmailResponse], error)
	SendResetPasswordEmail(context.Context, *connect_go.Request[v1.SendResetPasswordEmailRequest]) (*connect_go.Response[v1.SendResetPasswordEmailResponse], error)
}

// NewNotifierEmailSdrClient constructs a client for the services.ntfr.email.sdr.v1.NotifierEmailSdr
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotifierEmailSdrClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NotifierEmailSdrClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notifierEmailSdrClient{
		sendVerificationEmail: connect_go.NewClient[v1.SendVerificationEmailRequest, v1.SendVerificationEmailResponse](
			httpClient,
			baseURL+NotifierEmailSdrSendVerificationEmailProcedure,
			opts...,
		),
		sendResetPasswordEmail: connect_go.NewClient[v1.SendResetPasswordEmailRequest, v1.SendResetPasswordEmailResponse](
			httpClient,
			baseURL+NotifierEmailSdrSendResetPasswordEmailProcedure,
			opts...,
		),
	}
}

// notifierEmailSdrClient implements NotifierEmailSdrClient.
type notifierEmailSdrClient struct {
	sendVerificationEmail  *connect_go.Client[v1.SendVerificationEmailRequest, v1.SendVerificationEmailResponse]
	sendResetPasswordEmail *connect_go.Client[v1.SendResetPasswordEmailRequest, v1.SendResetPasswordEmailResponse]
}

// SendVerificationEmail calls services.ntfr.email.sdr.v1.NotifierEmailSdr.SendVerificationEmail.
func (c *notifierEmailSdrClient) SendVerificationEmail(ctx context.Context, req *connect_go.Request[v1.SendVerificationEmailRequest]) (*connect_go.Response[v1.SendVerificationEmailResponse], error) {
	return c.sendVerificationEmail.CallUnary(ctx, req)
}

// SendResetPasswordEmail calls services.ntfr.email.sdr.v1.NotifierEmailSdr.SendResetPasswordEmail.
func (c *notifierEmailSdrClient) SendResetPasswordEmail(ctx context.Context, req *connect_go.Request[v1.SendResetPasswordEmailRequest]) (*connect_go.Response[v1.SendResetPasswordEmailResponse], error) {
	return c.sendResetPasswordEmail.CallUnary(ctx, req)
}

// NotifierEmailSdrHandler is an implementation of the services.ntfr.email.sdr.v1.NotifierEmailSdr
// service.
type NotifierEmailSdrHandler interface {
	SendVerificationEmail(context.Context, *connect_go.Request[v1.SendVerificationEmailRequest]) (*connect_go.Response[v1.SendVerificationEmailResponse], error)
	SendResetPasswordEmail(context.Context, *connect_go.Request[v1.SendResetPasswordEmailRequest]) (*connect_go.Response[v1.SendResetPasswordEmailResponse], error)
}

// NewNotifierEmailSdrHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotifierEmailSdrHandler(svc NotifierEmailSdrHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	notifierEmailSdrSendVerificationEmailHandler := connect_go.NewUnaryHandler(
		NotifierEmailSdrSendVerificationEmailProcedure,
		svc.SendVerificationEmail,
		opts...,
	)
	notifierEmailSdrSendResetPasswordEmailHandler := connect_go.NewUnaryHandler(
		NotifierEmailSdrSendResetPasswordEmailProcedure,
		svc.SendResetPasswordEmail,
		opts...,
	)
	return "/services.ntfr.email.sdr.v1.NotifierEmailSdr/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotifierEmailSdrSendVerificationEmailProcedure:
			notifierEmailSdrSendVerificationEmailHandler.ServeHTTP(w, r)
		case NotifierEmailSdrSendResetPasswordEmailProcedure:
			notifierEmailSdrSendResetPasswordEmailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotifierEmailSdrHandler returns CodeUnimplemented from all methods.
type UnimplementedNotifierEmailSdrHandler struct{}

func (UnimplementedNotifierEmailSdrHandler) SendVerificationEmail(context.Context, *connect_go.Request[v1.SendVerificationEmailRequest]) (*connect_go.Response[v1.SendVerificationEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ntfr.email.sdr.v1.NotifierEmailSdr.SendVerificationEmail is not implemented"))
}

func (UnimplementedNotifierEmailSdrHandler) SendResetPasswordEmail(context.Context, *connect_go.Request[v1.SendResetPasswordEmailRequest]) (*connect_go.Response[v1.SendResetPasswordEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ntfr.email.sdr.v1.NotifierEmailSdr.SendResetPasswordEmail is not implemented"))
}
