// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/sess/store/svc/v1/service.proto

package svcv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/golerplate/contracts/generated/services/sess/store/svc/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SessStoreSvcName is the fully-qualified name of the SessStoreSvc service.
	SessStoreSvcName = "services.sess.store.svc.v1.SessStoreSvc"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SessStoreSvcCreateSessionProcedure is the fully-qualified name of the SessStoreSvc's
	// CreateSession RPC.
	SessStoreSvcCreateSessionProcedure = "/services.sess.store.svc.v1.SessStoreSvc/CreateSession"
	// SessStoreSvcGetSessionByIDProcedure is the fully-qualified name of the SessStoreSvc's
	// GetSessionByID RPC.
	SessStoreSvcGetSessionByIDProcedure = "/services.sess.store.svc.v1.SessStoreSvc/GetSessionByID"
)

// SessStoreSvcClient is a client for the services.sess.store.svc.v1.SessStoreSvc service.
type SessStoreSvcClient interface {
	CreateSession(context.Context, *connect_go.Request[v1.CreateSessionRequest]) (*connect_go.Response[v1.CreateSessionResponse], error)
	GetSessionByID(context.Context, *connect_go.Request[v1.GetSessionByIDRequest]) (*connect_go.Response[v1.GetSessionByIDResponse], error)
}

// NewSessStoreSvcClient constructs a client for the services.sess.store.svc.v1.SessStoreSvc
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSessStoreSvcClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SessStoreSvcClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sessStoreSvcClient{
		createSession: connect_go.NewClient[v1.CreateSessionRequest, v1.CreateSessionResponse](
			httpClient,
			baseURL+SessStoreSvcCreateSessionProcedure,
			opts...,
		),
		getSessionByID: connect_go.NewClient[v1.GetSessionByIDRequest, v1.GetSessionByIDResponse](
			httpClient,
			baseURL+SessStoreSvcGetSessionByIDProcedure,
			opts...,
		),
	}
}

// sessStoreSvcClient implements SessStoreSvcClient.
type sessStoreSvcClient struct {
	createSession  *connect_go.Client[v1.CreateSessionRequest, v1.CreateSessionResponse]
	getSessionByID *connect_go.Client[v1.GetSessionByIDRequest, v1.GetSessionByIDResponse]
}

// CreateSession calls services.sess.store.svc.v1.SessStoreSvc.CreateSession.
func (c *sessStoreSvcClient) CreateSession(ctx context.Context, req *connect_go.Request[v1.CreateSessionRequest]) (*connect_go.Response[v1.CreateSessionResponse], error) {
	return c.createSession.CallUnary(ctx, req)
}

// GetSessionByID calls services.sess.store.svc.v1.SessStoreSvc.GetSessionByID.
func (c *sessStoreSvcClient) GetSessionByID(ctx context.Context, req *connect_go.Request[v1.GetSessionByIDRequest]) (*connect_go.Response[v1.GetSessionByIDResponse], error) {
	return c.getSessionByID.CallUnary(ctx, req)
}

// SessStoreSvcHandler is an implementation of the services.sess.store.svc.v1.SessStoreSvc service.
type SessStoreSvcHandler interface {
	CreateSession(context.Context, *connect_go.Request[v1.CreateSessionRequest]) (*connect_go.Response[v1.CreateSessionResponse], error)
	GetSessionByID(context.Context, *connect_go.Request[v1.GetSessionByIDRequest]) (*connect_go.Response[v1.GetSessionByIDResponse], error)
}

// NewSessStoreSvcHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSessStoreSvcHandler(svc SessStoreSvcHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	sessStoreSvcCreateSessionHandler := connect_go.NewUnaryHandler(
		SessStoreSvcCreateSessionProcedure,
		svc.CreateSession,
		opts...,
	)
	sessStoreSvcGetSessionByIDHandler := connect_go.NewUnaryHandler(
		SessStoreSvcGetSessionByIDProcedure,
		svc.GetSessionByID,
		opts...,
	)
	return "/services.sess.store.svc.v1.SessStoreSvc/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SessStoreSvcCreateSessionProcedure:
			sessStoreSvcCreateSessionHandler.ServeHTTP(w, r)
		case SessStoreSvcGetSessionByIDProcedure:
			sessStoreSvcGetSessionByIDHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSessStoreSvcHandler returns CodeUnimplemented from all methods.
type UnimplementedSessStoreSvcHandler struct{}

func (UnimplementedSessStoreSvcHandler) CreateSession(context.Context, *connect_go.Request[v1.CreateSessionRequest]) (*connect_go.Response[v1.CreateSessionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.sess.store.svc.v1.SessStoreSvc.CreateSession is not implemented"))
}

func (UnimplementedSessStoreSvcHandler) GetSessionByID(context.Context, *connect_go.Request[v1.GetSessionByIDRequest]) (*connect_go.Response[v1.GetSessionByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.sess.store.svc.v1.SessStoreSvc.GetSessionByID is not implemented"))
}
