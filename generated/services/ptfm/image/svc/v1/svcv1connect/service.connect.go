// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/ptfm/image/svc/v1/service.proto

package svcv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/golerplate/contracts/generated/services/ptfm/image/svc/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PtfmImageSvcName is the fully-qualified name of the PtfmImageSvc service.
	PtfmImageSvcName = "services.ptfm.image.svc.v1.PtfmImageSvc"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PtfmImageSvcCreateSignedProfilePictureUrlProcedure is the fully-qualified name of the
	// PtfmImageSvc's CreateSignedProfilePictureUrl RPC.
	PtfmImageSvcCreateSignedProfilePictureUrlProcedure = "/services.ptfm.image.svc.v1.PtfmImageSvc/CreateSignedProfilePictureUrl"
)

// PtfmImageSvcClient is a client for the services.ptfm.image.svc.v1.PtfmImageSvc service.
type PtfmImageSvcClient interface {
	CreateSignedProfilePictureUrl(context.Context, *connect_go.Request[v1.CreateSignedProfilePictureUrlRequest]) (*connect_go.Response[v1.CreateSignedProfilePictureUrlResponse], error)
}

// NewPtfmImageSvcClient constructs a client for the services.ptfm.image.svc.v1.PtfmImageSvc
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPtfmImageSvcClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PtfmImageSvcClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ptfmImageSvcClient{
		createSignedProfilePictureUrl: connect_go.NewClient[v1.CreateSignedProfilePictureUrlRequest, v1.CreateSignedProfilePictureUrlResponse](
			httpClient,
			baseURL+PtfmImageSvcCreateSignedProfilePictureUrlProcedure,
			opts...,
		),
	}
}

// ptfmImageSvcClient implements PtfmImageSvcClient.
type ptfmImageSvcClient struct {
	createSignedProfilePictureUrl *connect_go.Client[v1.CreateSignedProfilePictureUrlRequest, v1.CreateSignedProfilePictureUrlResponse]
}

// CreateSignedProfilePictureUrl calls
// services.ptfm.image.svc.v1.PtfmImageSvc.CreateSignedProfilePictureUrl.
func (c *ptfmImageSvcClient) CreateSignedProfilePictureUrl(ctx context.Context, req *connect_go.Request[v1.CreateSignedProfilePictureUrlRequest]) (*connect_go.Response[v1.CreateSignedProfilePictureUrlResponse], error) {
	return c.createSignedProfilePictureUrl.CallUnary(ctx, req)
}

// PtfmImageSvcHandler is an implementation of the services.ptfm.image.svc.v1.PtfmImageSvc service.
type PtfmImageSvcHandler interface {
	CreateSignedProfilePictureUrl(context.Context, *connect_go.Request[v1.CreateSignedProfilePictureUrlRequest]) (*connect_go.Response[v1.CreateSignedProfilePictureUrlResponse], error)
}

// NewPtfmImageSvcHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPtfmImageSvcHandler(svc PtfmImageSvcHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	ptfmImageSvcCreateSignedProfilePictureUrlHandler := connect_go.NewUnaryHandler(
		PtfmImageSvcCreateSignedProfilePictureUrlProcedure,
		svc.CreateSignedProfilePictureUrl,
		opts...,
	)
	return "/services.ptfm.image.svc.v1.PtfmImageSvc/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PtfmImageSvcCreateSignedProfilePictureUrlProcedure:
			ptfmImageSvcCreateSignedProfilePictureUrlHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPtfmImageSvcHandler returns CodeUnimplemented from all methods.
type UnimplementedPtfmImageSvcHandler struct{}

func (UnimplementedPtfmImageSvcHandler) CreateSignedProfilePictureUrl(context.Context, *connect_go.Request[v1.CreateSignedProfilePictureUrlRequest]) (*connect_go.Response[v1.CreateSignedProfilePictureUrlResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.ptfm.image.svc.v1.PtfmImageSvc.CreateSignedProfilePictureUrl is not implemented"))
}
