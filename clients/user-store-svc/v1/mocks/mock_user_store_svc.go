// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source interface.go -destination mocks/mock_user_store_svc.go -package user_store_svc_v1_mocks
//

// Package user_store_svc_v1_mocks is a generated GoMock package.
package user_store_svc_v1_mocks

import (
	context "context"
	reflect "reflect"

	user_store_svc_v1_entities "github.com/golerplate/contracts/clients/user-store-svc/v1/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUserStoreSvc is a mock of UserStoreSvc interface.
type MockUserStoreSvc struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreSvcMockRecorder
}

// MockUserStoreSvcMockRecorder is the mock recorder for MockUserStoreSvc.
type MockUserStoreSvcMockRecorder struct {
	mock *MockUserStoreSvc
}

// NewMockUserStoreSvc creates a new mock instance.
func NewMockUserStoreSvc(ctrl *gomock.Controller) *MockUserStoreSvc {
	mock := &MockUserStoreSvc{ctrl: ctrl}
	mock.recorder = &MockUserStoreSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStoreSvc) EXPECT() *MockUserStoreSvcMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUserStoreSvc) ChangePassword(ctx context.Context, userID, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, userID, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserStoreSvcMockRecorder) ChangePassword(ctx, userID, oldPassword, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserStoreSvc)(nil).ChangePassword), ctx, userID, oldPassword, newPassword)
}

// CreateUser mocks base method.
func (m *MockUserStoreSvc) CreateUser(ctx context.Context, req *user_store_svc_v1_entities.UserCreate) (*user_store_svc_v1_entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*user_store_svc_v1_entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserStoreSvcMockRecorder) CreateUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserStoreSvc)(nil).CreateUser), ctx, req)
}

// GetUserByEmail mocks base method.
func (m *MockUserStoreSvc) GetUserByEmail(ctx context.Context, email string) (*user_store_svc_v1_entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*user_store_svc_v1_entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserStoreSvcMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserStoreSvc)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockUserStoreSvc) GetUserByID(ctx context.Context, id string) (*user_store_svc_v1_entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*user_store_svc_v1_entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserStoreSvcMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserStoreSvc)(nil).GetUserByID), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockUserStoreSvc) GetUserByUsername(ctx context.Context, username string) (*user_store_svc_v1_entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*user_store_svc_v1_entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserStoreSvcMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserStoreSvc)(nil).GetUserByUsername), ctx, username)
}
